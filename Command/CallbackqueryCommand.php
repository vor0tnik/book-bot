<?php

/**
 * This file is part of the TelegramBot package.
 *
 * (c) Avtandil Kikabidze aka LONGMAN <akalongman@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Longman\TelegramBot\Commands\SystemCommands;


use App\Book;
use App\DB\Books;
use App\DB\Genre;
use App\DB\Users;
use Longman\TelegramBot\Commands\SystemCommand;
use Longman\TelegramBot\Commands\UserCommands\StartCommand;
use Longman\TelegramBot\Entities\KeyboardButton;
use Longman\TelegramBot\Entities\ServerResponse;
use Longman\TelegramBot\Entities\User;
use Longman\TelegramBot\Request;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\InlineKeyboardButton;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Commands\SystemCommands\GenericmessageCommand;
use function Sodium\library_version_major;

/**
 * Callback query command
 */
class CallbackqueryCommand extends SystemCommand
{
    /**
     * @var callable[]
     */
    protected static $callbacks = [];

    /**
     * @var string
     */
    protected $name = 'callbackquery';

    /**
     * @var string
     */
    protected $description = 'Reply to callback query';

    /**
     * @var string
     */
    protected $version = '1.0.0';

    /**
     * Command execute method
     *
     * @return ServerResponse
     */
    public function execute(): ServerResponse
    {


        $callback_query = $this->getCallbackQuery();
        $user_id = $callback_query->getFrom()->getId();
        $username = $callback_query->getFrom()->getUsername();
        $query_id = $callback_query->getId();
        $query_data = $callback_query->getData(); // –∏–º—è –∫–æ–º–∞–Ω–¥—ã


        $getUser = Users::getChat($user_id);


        switch ($query_data) { // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É


            case 'cancel': // –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π


                Users::red($getUser['id'], ['action' => NULL, 'write_text' => NULL]);


                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId(),]);

                Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "üö´ –î–µ–π—Å—Ç–≤–∏—è –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏",
                    'parse_mode' => 'HTML',
                    'disable_web_page_preview' => true
                ]);


                return StartCommand::MenuHome($getUser, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');


                break;


            case 'search_book': // –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏


                Users::red($getUser['id'], ['action' => 10, 'write_text' => NULL]); // –ú–µ–Ω—è–µ–º –≤ –µ–∫—à–µ–Ω–µ –Ω–æ–º–µ—Ä

                $keyboard = new InlineKeyboard();
                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üö´ –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel']));


                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n<i>–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –ù–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏ –∏–ª–∏ –ê–≤—Ç–æ—Ä—É </i>",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


            case 'back' : //  –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId(),]);

                return StartCommand::MenuHome($getUser, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');

                break;


            case 'add_book': // –î–æ–±–∞–≤–ª—è–µ–º –ö–Ω–∏–≥—É

                /**
                 * [action]
                 * 1 -- –≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏
                 * 2 -- –≤–æ–¥ –ê–≤—Ç–æ—Ä –¥–ª—è –∫–Ω–∏–≥–∏
                 * 3 -- –≤–≤–æ–¥ –∂–∞–Ω—Ä–∞
                 * 4 -- –≤–≤–æ–¥ –°–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                 *
                 * 10 - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥
                 */


                Users::red($getUser['id'], ['action' => 1, 'write_text' => json_encode([])]);

                $keyboard = new InlineKeyboard();


                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üö´ –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel']));

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "–í–≤–µ–¥–∏—Ç–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ö–Ω–∏–≥–∏</b>:",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


            case $this->checkdelBook($query_data): // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É
                $id_book = str_replace('delBook_', '', $query_data);

                $getBook = Books::get($id_book);

                if (empty($getBook)) {
                    return $callback_query->answer([
                        'text' => '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–Ω–∏–≥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞',
                        'show_alert' => true,
                    ]);
                }


                Books::delete($getBook['id']);

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "‚úÖ –£–¥–∞–ª–∏–ª–∏ –∫–Ω–∏–≥—É: <code>{$getBook['title']}</code>",
                    'parse_mode' => 'HTML',
                    'disable_web_page_preview' => true
                ]);


                return StartCommand::MenuHome($getUser, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');


                break;


            case $this->checkviewGenre($query_data): // –í—ã–±—Ä–∞–ª–∏ –ö–Ω–∏–≥–∏ –ø–æ –ñ–∞–Ω—Ä—É

                $id_genre = str_replace('viewGenre_', '', $query_data);


                $getBooks = Books::allGenre($id_genre);

                $getGenre = Genre::get($id_genre);


                if (empty($getBooks)) {
                    return $callback_query->answer([
                        'text' => '–ü–æ –¥–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É, –∫–Ω–∏–≥ –Ω–µ—Ç—É (:',
                        'show_alert' => true,
                    ]);
                }


                $keyboard = new InlineKeyboard();

                foreach ($getBooks as $book) {
                    $keyboard->addRow(new InlineKeyboardButton(['text' => "üìñ {$book['title']}({$book['author']})", 'callback_data' => 'viewBook_' . $book['id']]));
                }

                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back']));

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "–ö–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É: {$getGenre['name']}",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


            case $this->checkviewBook($query_data): //–ß–∏—Ç–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–∏–≥–µ


                $id_book = str_replace('viewBook_', '', $query_data);

                $getBook = Books::get($id_book);

                if (empty($getBook)) {
                    return $callback_query->answer([
                        'text' => '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–Ω–∏–≥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞',
                        'show_alert' => true,
                    ]);
                }


                $book_genre = '';

                //** –ë–µ—Ä–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ */
                $allGenre = Genre::all(); // –æ–±—å–µ–∫—Ç —Å –∂–∞–Ω—Ä–∞–º–∏
                $arr_genre = explode(',', $getBook['genre']);

                foreach ($arr_genre as $genre_id) {

                    if (!empty($allGenre[$genre_id])) {

                        if (empty($genre_id)) continue;

                        $book_genre .= " #{$allGenre[$genre_id]['name']}";

                    }

                }

                $msg = "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>{$getBook['title']}" . PHP_EOL;
                $msg .= "<b>–ê–≤—Ç–æ—Ä:</b>{$getBook['author']}" . PHP_EOL;
                $msg .= "<b>–ñ–∞–Ω—Ä:</b>{$book_genre}" . PHP_EOL;
                $msg .= "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏—è:</b>" . PHP_EOL;
                $msg .= "{$getBook['description']}" . PHP_EOL;


                $keyboard = new InlineKeyboard();
                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É', 'callback_data' => 'delBook_' . $getBook['id']]));
                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'back']));


                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => $msg,
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


            case 'list_book': // –ö–Ω–æ–ø–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏

                $books = Books::all();


                $count_book = count($books);


                $keyboard = new InlineKeyboard();


                if (!empty($books)) {
                    foreach ($books as $book) {
                        $keyboard->addRow(new InlineKeyboardButton(['text' => "üìñ {$book['title']}({$book['author']})", 'callback_data' => 'viewBook_' . $book['id']]));
                    }
                }


                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'back']));

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º—ã –Ω–∞—à–ª–∏ {$count_book}—à—Ç.",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


            case 'genre_book': // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π


                $genres = Genre::all();
                if (empty($genres)) {
                    return $callback_query->answer([
                        'text' => '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∂–∞–Ω—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                        'show_alert' => true,
                    ]);
                }


                $keyboard = new InlineKeyboard();


                foreach ($genres as $genre) {

                    $keyboard->addRow(new InlineKeyboardButton(['text' => "üìì {$genre['name']}", 'callback_data' => 'viewGenre_' . $genre['id']]));

                }

                $keyboard->addRow(new InlineKeyboardButton(['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'back']));

                Request::deleteMessage(['chat_id' => $user_id, 'message_id' => $callback_query->getMessage()->getMessageId()]); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                return Request::sendMessage([
                    'chat_id' => $user_id,
                    'text' => "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard,
                    'disable_web_page_preview' => true
                ]);


                break;


        }


        return Request::emptyResponse();
    }


    /**
     * Add a new callback handler for callback queries.
     *
     * @param $callback
     */
    public static function addCallbackHandler($callback): void
    {
        self::$callbacks[] = $callback;
    }


    /**
     * –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã viewBook_...
     * @param $quer
     * @return bool
     */
    public function checkviewBook($quer)
    {
        if (stripos($quer, "viewBook_") === false) {
            return false;
        } else {
            return true;
        }
    }


    /**
     * –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã delBook_...
     * @param $quer
     * @return bool
     */
    public function checkdelBook($quer)
    {
        if (stripos($quer, "delBook_") === false) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã viewGenre_
     * @param $quer
     * @return bool
     */
    public function checkviewGenre($quer)
    {
        if (stripos($quer, "viewGenre_") === false) {
            return false;
        } else {
            return true;
        }
    }


}